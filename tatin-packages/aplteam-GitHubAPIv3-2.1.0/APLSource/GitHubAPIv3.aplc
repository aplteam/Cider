:Class GitHubAPIv3
⍝ This class offers methods that allow one to communicate with GitHub by using the GitHub REST API from Dyalog APL.
⍝ Note that this is version 3 of the GitHub API; Later versions do **not** use REST.\\
⍝ Most methods of this class become available only by instantiating the class. `⎕NEW` requires an owner as argument.\\
⍝ However, there are also a few shared methods beyond `Version` and `History` available.\\
⍝ Kai Jaeger\\
⍝ Homepage: <https://github.com/aplteam//GitHubAPIv3>

    ⎕IO←1 ⋄ ⎕ML←1

    ∇ r←Version
    ⍝ Returns the version number from `TatinVars` if possible.
    ⍝ See also `History`
      :Access Public Shared
      :If 0<##.⎕NC'TatinVars.CONFIG'
          r←(⎕JSON⍠('Dialect' 'JSON5')⊢##.TatinVars.CONFIG).version
      :Else
      ⍝ When a script was not loaded with Tatin, there will be no namespace `TatinVars`.
      ⍝ In such cases we cannot provide a version number, so we return just ''.
          r←''
      :EndIf
    ∇

    ∇ History
      :Access Public Shared
    ⍝ * 2.1.0 from 2025-04-21
    ⍝   * Function `GetIssues` added
    ⍝   * Function `GetLabelStats` added
    ⍝   * `∆QuickView` (injected into issues) does not require an argument anymore & returns the creation date now as well
    ⍝   * `∆Details` (injected into issues) does not require an argument anymore
    ⍝   * Bug fixes
    ⍝     * Typo fixed in `Version`
    ⍝     * Empty "owner" was accepted by `⎕NEW` - makes no sense
    ⍝ * 2.0.0 from 2025-04-09
    ⍝   * Potentially breaking: `Version` now returns a char vector stemming from the package config file
    ⍝   * Packages updated
    ⍝   * "Make" improved
    ⍝ * 1.6.0 from 2025-01-025
    ⍝   * CommTools removed as a dependency - it was only required for tests
    ⍝   * `Version` now returns the package config file setting
    ⍝\\
    ⍝ For information regarding older versions see <https://github.com/aplteam/GitHubAPIv3/releases>
    ∇

    :Field Public Shared  path2CongaDLLs←''

    :Property owner
    :Access Public Instance
    ⍝ This is set once with the constructor, therefore no setter
        ∇ r←Get
          r←_owner
        ∇
    :EndProperty

    :Property personal_access_token
    :Access Public Instance
        ∇ r←Get
          r←_personal_access_token
        ∇
        ∇ Set ipa
          _personal_access_token←ipa.NewValue
        ∇
    :EndProperty

    ∇ make1(owner)
      :Access Public Instance
      :Implements Constructor
      '"Owner" must not be empty'Assert 0<≢_owner←owner~' '
      _personal_access_token←''
      _regEx←'setup_<repoName>_<version>[.\]*.[0-9]{0,6}\.exe'  ⍝ After version there _might_ be a built number
      A←(⊃⊃⎕CLASS ⎕THIS).##.APLTreeUtils2
      H←(⊃⊃⎕CLASS ⎕THIS).##.HttpCommand
      ⎕DF'GitHubAPIv3[',owner,']'
    ∇

    ∇ ns←GetLatestReleaseInfo repoName;gitPath
      :Access Public Instance
    ⍝ Returns meta data regarding the latest release. Drafts and beta releases are ignored.\\
    ⍝ You must use `https://` as protocol or not specify a protocol at all.\\
    ⍝ Returns a namespace with the data received from GitHub.
      'Right argument is not a repository name'⎕SIGNAL 11/⍨0=≢repoName
      gitPath←'https://api.github.com/repos/',_owner,'/',repoName,'/releases/latest'
      ns←GetJson gitPath
      ns.⎕DF'[JSON object: ',repoName,'-',ns.tag_name,']'
    ∇

    ∇ ns←GetReleaseInfoByTagName(repoName tagName);gitPath;rc;msg
      :Access Public Instance
    ⍝ Fetches release meta data with `tagName` from `repoName`.\\
    ⍝ You must use `https://` as protocol or not specify a protocol at all.
    ⍝ ## Right argument
    ⍝ * Name of the repository
    ⍝ * The tag name\\
    ⍝ Returns a namespace with the data received from GitHub.
      gitPath←'https://api.github.com/repos/',_owner,'/',repoName,'/releases/tags/',tagName
      ns←GetJson gitPath
      ns.⎕DF'[JSON object: ',repoName,'-',tagName,']'
    ∇

    ∇ data←{verbose}GetAllReleases repoName;gitPath;ns
      :Access Public Instance
    ⍝ Returns information regarding all releases of a given repository.\\
    ⍝ Notes:
    ⍝ * Pre-releases are included
    ⍝ * Users without "Push" access will **_not_** see any draft releases\\
    ⍝ By default a vector of text vectors is returned with the tags.
    ⍝ In case `verbose` is 1 namespaces for each release are returned.
      verbose←{0<⎕NC ⍵:⍎⍵ ⋄ 0}'verbose'
      gitPath←'https://api.github.com/repos/',_owner,'/',repoName,'/tags'
      ns←GetJson gitPath
      :If verbose
          data←ns
          :If 0≠≢data
              data.{⎕DF'[JSON Object: ',⍵,' ',name,']'}⊂repoName
          :EndIf
      :Else
          data←ns.name
      :EndIf
    ∇

    ∇ rateLimits←GetRateLimits;gitPath
      :Access Public Shared
    ⍝ Returns information regarding the general rate limits (no authentication) without hitting the limits.
    ⍝ This is about the general rate limits that apply in case the user is not authenticated which applies
    ⍝ because this is a shared method, so no authentication is implied.\\
    ⍝ See also the instance method `GetMyRateLimits`.
      gitPath←'https://api.github.com/rate_limit'
      rateLimits←GetJson gitPath
    ∇

    ∇ rateLimits←GetMyRateLimits;gitPath
      :Access Public Instance
    ⍝ Returns information regarding rate limits without hitting the limits. This is an instance method,
    ⍝ meaning that it returns the rate limits for the currently used authentication token.
    ⍝ See also the shared method `GetRateLimits`.
      gitPath←'https://api.github.com/rate_limit'
      rateLimits←GetJson gitPath
    ∇

    ∇ topics←GetAllTopics repoName;gitPath;parms;ns;data
      :Access Public Instance
    ⍝ Returns all topics of a given repository.\\
    ⍝ You must use `https://` as protocol or not specify a protocol at all.
      gitPath←'https://api.github.com/repos/',_owner,'/',repoName,'/topics'
      data←GetJson gitPath
      topics←data.names
    ∇

    ∇ ns←GetAllRepos;gitPath
      :Access Public Instance
    ⍝ Returns data of all **public** repositories of the current owner.\\
      gitPath←'https://api.github.com/users/',(_owner),'/repos'
      ns←GetJson gitPath
      ns.{⎕DF'[JSON Object: ',name,']'}⊂⍬
    ∇

    ∇ ns←{addPullRequests}GetAllIssues repoName;gitPath
      :Access Public Instance
    ⍝ Returns all issues for a given repository but no pull requests by default.\\
    ⍝ In GitHub, every pull request is an issue, but not all issues are pull requests.
    ⍝ You can enforce the addition of Pull Requests by passing a 1 as left argument.\\
    ⍝ In case there are no issues an empty vector is returned.
      addPullRequests←{0<⎕NC ⍵:⍎⍵ ⋄ 0}'addPullRequests'
      gitPath←'https://api.github.com/repos/',(_owner),'/',repoName,'/issues'
      ns←GetJson gitPath
      :If 0<≢ns
          :If ~addPullRequests
              ns←(0=⊃¨ns.⎕NC⊂'pull_request')/ns
          :EndIf
          ns.⎕DF(repoName,' issue ')∘,¨(⍕¨ns.number)
          ns.⎕FX⊂⎕CR'∆List'
          ns.⎕FX⊂'r←∆Details;ind' '⍝ Like <List> but with greatly improved readability' 'r←∆List' 'r(⎕THIS.##.GetPrincipal)←''assignees'' ''login''' 'r(⎕THIS.##.GetPrincipal)←''labels'' ''name''' 'r[⍸r[;2]≡¨⊂⊂''null'';2]←⊂''''' ':If 0<≢ind←⍸r[;1]∊''created_at'' ''updated_at''' 'r[ind;2]←{r←⍵ ⋄ r[11]←'' '' ⋄ r}¨r[ind;2]' ':EndIf'
          ns.⎕FX⊂'r←∆QuickView;keyWords;ind' '⍝ Provides the most common pieces of information' 'r←∆Details' 'keyWords←''title'' ''number'' ''state'' ''created_at'' ''updated_at'' ''labels'' ''assignees''' 'r←(r[;1]∊keyWords)⌿r' 'r←r[⍋keyWords⍳r[;1];]' ':If 0<≢ind←⍸r[;1]∊''created_at'' ''updated_at''' 'r[ind;2]←{r←⍵ ⋄ r[11]←'' '' ⋄ r}¨r[ind;2]' ':EndIf'
      :EndIf
    ∇

    ∇ r←GetIssues repoName;issues;labels
    ⍝ Get a matrix with all issues.\\
    ⍝ [;1] Issue number\\
    ⍝ [;2] Creation date
    ⍝ [;3] Title
    ⍝ [;4] Label(s) assigned
      :Access Public Instance
      :If 0=≢issues←GetAllIssues repoName
          r←0 4⍴⊂''
      :Else
          labels←{2::'' ⋄ ⊃{⍺,',',⍵}/⍵.name}¨issues.labels
          r←issues.number,↑issues.(created_at title)
          r,←labels
          r[;2]←{r←↑⍵ ⋄ r[;11]←' ' ⋄ ↓r}r[;2]
      :EndIf
    ∇

    ∇ r←GetLabelStats repoName;issues;labels
    ⍝ Get a matrix with all labels assigned to issues in [;1] and the count in [;2]
      :Access Public Instance
      :If 0=≢issues←GetAllIssues repoName
          r←0 2⍴⊂''
      :Else
          labels←⊃,/{2::⊂'<no label>' ⋄ ⍵.name}¨issues.labels
          labels←labels{(⍵↓⍺),(⍵↑⍺)}+/'<no label>'∘≡¨labels
          r←{⍺(≢⍵)}⌸labels
          r[;1]←⊃¨r[;1]
          r←r[⍒r[;2];]
      :EndIf
    ∇

    ∇ ns←GetIssue(repoName number);gitPath
      :Access Public Instance
    ⍝ Returns exactly one issue for a given repository.\\
    ⍝ Note that `ns` gets three functions injected: `∆List`, `∆Details` and `∆QuickView`. While `∆List` does not
    ⍝ require an argument, `∆Details` and `∆QuickView` require an instance of this class as right argument.\\
    ⍝ `∆Details` and `∆QuickView` both replace the JSON objects "assignees" and "labels" by real data, but
    ⍝ `∆QuickView` returns a small subset for a quick glance.
      gitPath←'https://api.github.com/repos/',(_owner),'/',repoName,'/issues/',⍕number
      ns←GetJson gitPath
      ns.{⎕DF ⍵}'[Issue ',(⍕number),' of repo ',repoName,']'
      ns.⎕FX ⎕CR'∆List'
      ns.⎕FX'r←∆Details instance' 'r←∆List' 'r(instance.GetPrincipal)←''assignees'' ''login''' 'r(instance.GetPrincipal)←''labels'' ''name'''
      ns.⎕FX'r←∆QuickView instance;keyWords' 'r←∆Details instance' 'keyWords←''title'' ''number'' ''state'' ''updated_at'' ''labels'' ''assignees''' 'r←(r[;1]∊keyWords)⌿r' 'r←r[⍋keyWords⍳r[;1];]'
    ∇

    ∇ endpoints←GetAllEndpoints;gitPath;A;data
      :Access Public Shared
    ⍝ This method returns all REST endpoints offered by the API as a two-column matrix:\\
    ⍝ * [;1] is the name of the endpoint
    ⍝ * [;2] is the URL of the endpoint
    ⍝ It returns a namespace. Use the built-in `List` function for an overview.
      A←##.APLTreeUtils2
      gitPath←'https://api.github.com/'
      data←GetJson gitPath
      endpoints←data.{{⍵,[1.5]⍎¨⍵}⎕NL-2}⍬
    ∇

    ∇ number←CastTagname2Number text;vec;bool
      :Access Public Shared
    ⍝ Takes something like `v12.34.567` or `v123.4.5.6789` and returns 1234567 and 1234567.6789 respectively.\\
    ⍝ The items are called major.minor.patch.built with "built" being optional.\\
    ⍝ In case that is impossible (because `text` does not fulfil the criteria) `⍬` is returned.\\
    ⍝ Assumptions:
    ⍝ * `text` may or may not start with a non-digit. All leading non-digit characters are ignored.\\
    ⍝   Therefore both `1.2.3` and `v.1.2.3` are valid input.
    ⍝ * No part is allowed to start with a zero followed by a non-zero digit. Therefore 1.0.0 is valid input but
    ⍝   01.2.3, 1.02.3 and 1.2.03 are not.
    ⍝ * The remaining `text` must consist of nothing but digits and dots.
    ⍝ * The first two numbers ("major" and "minor") must not be bigger than 999.
    ⍝ * The third number ("patch") must not be bigger than 9999.
    ⍝ * The optional last (forth) number must not be bigger than 99999.
    ⍝ * `text` must come either with three numbers (as in `1.2.3`) or with four number (as in `1.2.3.9999`).
    ⍝ If the tag name does not fulfil the assumptions the conversion might fail; in that case `⍬` is
    ⍝ returned as result.
    ⍝ Examples:
    ⍝ + 1.20.333 transforms into 120333
    ⍝ + 12.12.123.12345 transforms into 1212123.12345\\
      number←⍬
      ⍝ This function might be called from a Shared method. when we need to address APLTreeUtils2 explicitly,
      ⍝ or from a n Instance method, when `A` is a ref pointing to APLTreeUtils2.
      :If 0<##.⎕NC'APLTreeUtils2'
          A←##.APLTreeUtils2
      :EndIf
      :If 0<≢text←{⍵↓⍨+/∧\0=⍵∊⎕D}text
          text,←⊃,/(0⌈2-text+.='.')⍴⊂'.0'
      :AndIf 0=+/{(1<⊃≢⍵)∧⊃'0'=1↑⍵}¨'.'A.Split text
          (bool vec)←'.'⎕VFI text
      :AndIf 3 4∊⍨⍴bool
          vec←{⍵↑⍨3⌈4⌊⍴⍵}↑vec
          :If 3=⍴vec
              :If ∧/1000 1000 10000>vec
              :AndIf 0=number←1000 1000 10000⊥vec
                  number←⍬
              :EndIf
          :Else
              :If ~∧/1000 1000 10000 100000>vec
                  number←⍬
              :ElseIf 0=number←1000 1000 10000 100000⊥vec
                  number←⍬
              :EndIf
              number÷←100000
          :EndIf
      :EndIf
    ∇

    ∇ url←{tag}GetRelease(repoName type);more;length;info;gitPath;ns;ind
    ⍝ Returns the URL of a version (release) of `repoName`, be default the latest one.
    ⍝ Draft releases are ignored.\\
    ⍝ The URL depends on what `type` is.
    ⍝ `type` may be one of: <EXE>, <ZIP>, <TAR>. `type` is not case sensitive.\\
    ⍝ The optional left argument `tag` can be used to request a particular version rather than the latest one.
    ⍝ `tag` can be something like `1.2.3` (or `1.2.3.4`) or `v1.2.3` (or `v1.2.3.4`).\\
    ⍝ Returns the download url or an empty vector in case of failure, for example when the given type cannot be detected.
      :Access Public Instance
      gitPath←'https://api.github.com/repos/',_owner,'/',repoName,'/releases'
      ns←GetJson gitPath
      url←''
      type←1 ⎕C type
      'Invalid right argument ("type")'⎕SIGNAL 11/⍨~(⊂type)∊'EXE' 'ZIP' 'TAR'
      info←GetLatestReleaseInfo repoName
      :If 0=⎕NC'tag'
          tag←((1⍴info.tag_name)∊'Vv')↓info.tag_name
      :EndIf
      :If (⊂type)∊'ZIP' 'TAR'
          url←('ZIP' 'TAR'⍳⊂type)⊃info.(zipball_url tarball_url)
      :ElseIf 'EXE'≡type
      :AndIf 0<≢info.assets
          ind←(⎕C ¯4↑¨info.assets.name)⍳⊂'.exe'
      :AndIf (≢info.assets)≥ind
          url←ind⊃info.assets.browser_download_url
      :EndIf
    ∇

    ∇ tag←GetLatestTag repoName;MyGitAPI;ns;gitVersion;api
    ⍝ This method returns the latest `tag` (version number) for `repoName` .\\
    ⍝ Note that drafted releases and pre-releases are both ignored.
      :Access Public Instance
      ns←GetLatestReleaseInfo repoName
      tag←ns.tag_name
    ∇

    ∇ betterVersion←CheckForUpdate(repoName version);gitVersion;version_;gitVersion_;msg
    ⍝ Takes a version number like `1.2.3` or `1.2.3.4-beta-1` (usually what is currently installed/used).\\
    ⍝ Returns one of:
    ⍝ * An empty vector in case no better version is available
    ⍝ * The better version number\\
    ⍝ If the given version is a beta version (say 1.2.3-beta-1) and on GitHub it is 1.2.3 then the GitHub version
    ⍝ is considered to be a later version. \\
    ⍝ If the latest verson on GitHub is a beta an erroris thrown: this is not supported.
      :Access Public Instance
      betterVersion←''
      gitVersion_←GetLatestTag repoName
      gitVersion←⌊CastTagname2Number gitVersion_
      msg←'Latest version on GitHub is a beta (',gitVersion_,') - not supported'
      msg Assert 0=≢gitVersion_~⎕D,'.v'             ⍝ This can only ever be untrue for a beta version
      version_←{⍵↑⍨¯1+⍵⍳'-'}version
      version_←CastTagname2Number version_~'v'
      :If 0<≢version~⎕D,'.'                         ⍝ This can only ever be true for a beta version
          :If version_≤gitVersion
              betterVersion←gitVersion_             ⍝ Because a beta is by definition worse than a no-beta
          :EndIf
      :Else
          version_←CastTagname2Number version~'v'
          :If version_<gitVersion
              betterVersion←gitVersion_
          :EndIf
      :EndIf
    ∇

    ∇ r←CreateHttpParms
    ⍝ Creates a parameter space that can be passed to some method.
    ⍝ Currently this is private. We might need to change this once we introduce methods
    ⍝ that actually write data, like, say, `CreateIssue`.
    ⍝ :Access Public Instance
    ⍝CodeCoverage:ignore⍝
      r←⎕NS''
      r.Accepted←'Accept: application/vnd.github.v3+json'
      r.Method←'GET'
      r.Body←''
    ⍝CodeCoverage:ignore⍝
    ∇

    ⍝ ------------------------------------------ Private stuff ----------------------------------

      GetNoOfPages←{
   ⍝ Takes HTTP headers and returns the number of pages. If there are not any a zero is returned.
          headers←⍵
          bool←'link'∘≡¨⎕C headers[;1]
          0=+/bool:0
          link←(bool⍳1)⊃headers[;2]
          buff←' 'A.Split link
          last←(¯1+⍴buff)⊃buff
          buff←{⍵{(⍴'?page-')↓⍵[2]↑⍵[1]↓⍺}⊃'(&|\?)page=[0-9]{1,}'⎕S 0 1⊣⍵}last
          ⊃⊃(//)⎕VFI buff
      }

    ∇ data←GetJson gitURL;h;json;r;noOfPages;i;ind;link;r2;links;H_
    ⍝ Takes a URL and returns a namespace, possibly with sub namespaces.
    ⍝ In case the result is virtually paged by the server this function collects all data!
      :If 0=⎕NC'H'
          H_←(⊃⊃⎕CLASS ⎕THIS).##.HttpCommand    ⍝ Called as a shared method
      :Else
          H_←H                                  ⍝ Called from an instance
      :EndIf
      h←⎕NEW H_(,⊂'')
      :If 0<⎕NC'_personal_access_token'
      :AndIf 0<≢_personal_access_token
          'Authorization'h.AddHeader('Bearer ',_personal_access_token)
      :EndIf
      h.URL←EncodeBlank gitURL
      :If 0<≢path2CongaDLLs
          h.CongaPath←path2CongaDLLs
      :EndIf
      r←h.Run
      (r.HttpMessage,' (',(⍕r.HttpStatus),')')Assert r.HttpStatus≡200
      data←⎕JSON r.Data
      noOfPages←GetNoOfPages r.Headers
      :If 0<noOfPages
          ⍝ Fetch second page
          ind←r.Headers[;1]⍳⊂'Link'
          link←2⊃r.Headers[ind;]
          h.URL←{¯1↓1↓⍵↑⍨¯1+⍵⍳';'}link
          r2←h.Run
          (r.HttpMessage,' (',(⍕r.HttpStatus),')')Assert r.HttpStatus≡200
          data,←⎕JSON r2.Data
          :If 2<noOfPages
              ⍝ Fetch all remaining pages
              links←({¯2↓1↓⍵↑⍨¯1+⍵⍳';'}link)∘{⍺,⍕⍵}¨2↓⍳noOfPages
              :For link :In links
                  h.URL←link
                  r2←h.Run
                  (r.HttpMessage,' (',(⍕r.HttpStatus),')')Assert r.HttpStatus≡200
                  data,←⎕JSON r2.Data
              :EndFor
          :EndIf
      :EndIf
    ∇

    ∇ data←data GetPrincipal(propName principalName);row;jsonObj;buff
    ⍝ * `propName` is the name of a variable in `data` holding one or more JSON object(s).\\
    ⍝ * `principalName` is the principal name of that JSON object or JSON objects.\\
    ⍝   Typical examples are "label" or "name"\\
    ⍝ The generic names are then replaced but the real data.
      :Access Public instance
      row←data[;1]⍳⊂propName
      :If 0≠≢jsonObj←2⊃data[row;]
          buff←jsonObj⍎¨⊂principalName
          data[row;2]←{⍺,', ',⍵}/buff
      :EndIf
    ∇

⍝ The following function is fixed within the data spaces returned by some commands:
    ∇ r←∆List;names;values;bool
    ⍝ List all variables and their values.
      names←' '~¨⍨↓⎕NL 2
      values←⍎¨names
      bool←{16::1 ⋄ 0⊣1↑0⍴⍵}¨values  ⍝ Were are objects?
      :If ∨/bool
          {⍵.⎕DF⊂'(JSON object)'}¨bool/values
      :EndIf
      r←⍉names,[0.5]values
    ∇

    ∇ r←EncodeBlank r
      ((' '=r)/r)←⊂'%20'
      r←∊r
    ∇

    Assert←{⍺←'' ⋄ (,1)≡,⍵:r←1 ⋄ ⎕ML←1 ⋄ ⍺ ⎕SIGNAL 1↓(⊃∊⍵),11}

:EndClass
