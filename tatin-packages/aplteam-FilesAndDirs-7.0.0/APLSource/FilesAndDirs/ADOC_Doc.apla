(
 '## Overview'
 ''
 'This package provides functions that are useful for dealing with files and directories. '
 'They aim to be platform-independent.'
 ''
 'Note that error codes and messages may differ between operating systems for the same'
 'type of problem.'
 ''
 '## Characters to avoid in file names and paths'
 ''
 'Windows filenames cannot contain any of these characters: `\/:*?"<>|`.'
 'If you want platform-independent code, now or in the future,'
 'avoid using them even in Mac OS or Linux filenames.'
 ''
 '## Separators in file paths'
 ''
 'Dyalog tried to ease the pain by converting any `\` character into `/` on Windows.'
 'The idea of sticking always with the `/` as separator because it works anyway is'
 'attractive, but it creates new poblems: when you use third-party software such as a .NET'
 'assembly or an EXE like 7zip.exe on Windows, then you **must** use `\` as a separator.'
 'Even setting the `Directory` property of a `FileBox` object will fail with `/` as the separator,'
 'at least at the time I created `FilesAndDirs`.'
 ''
 'For platform independence it is essential that filenames and directory names are _normalized_.'
 'This means using the correct separator for the current operating system.'
 'Otherwise you could create a directory or file with a backslash in its name, which is disastrous'
 'on Linux or Mac OS.'
 ''
 'The `FilesAndDirs` functions protect you from this problem by normalizing your file paths.'
 'Use cover functions like `MkDir`, `NNAMES` and `NCREATE` etc. instead of the built-in system '
 'functions to overcome the problem.'
 ''
 '`⎕NCOPY` and `⎕NMOVE` (introduced in 17.0) are exceptions, but you can use the native function'
 'with the `ExecNfunction` operator.'
 'The `CurrentSep` method returns the correct separator for the current operating system.'
 ''
 'The `NormalizePath` method normalizes a file path for the current operating system.'
 ''
 'If you have a particular reason for using `/` under Windows or `\` under Linux'
 'or Mac OS then you can use the `EnforceBackslash` or `EnforceSlash` functions.'
 ''
 '## Misc'
 ''
 'This class supports Windows, Mac OS and Linux but has not been tested on either the Raspberry Pi '
 'or AIX.'
 ''
 '## `Dir` and `Dir2`'
 ''
 '`Dir` was designed to act recursively before `⎕NINFO` learned about recursion. As it turned out'
 '`⎕NINFO` with `recurse←1` is **way** faster then `Dir`. When I finally realized that I implemented '
 '`Dir2` and declared `Dir` to be deprecated. '
 ''
 'Apart from the formidable performance gain, the two should return the same result, but as it turned'
 'out `⎕NINFO` reduces the nesting level when it acts on a single file or a single directory, but'
 '`Dir` does not do this, it always keeps the same nesting level.'
 ''
 'It seemed unreasonable to change `Dir`, because it is likely to break some code. That''s why `Dir2`'
 'was created, which sticks with the `⎕NINFO` syntax. For a similar reason `Dir2` uses the keyword'
 '`recurse` for recursion, while `Dir`, introduced before `⎕NINFO` learned about recursion, uses'
 '`recursive`. '
 ''
 'Also, `Dir` implemented `depth` earlier than `⎕NINFO`, and differently. `Dir2` again follows closely'
 'the `⎕NINFO` syntax.'
 ''
 '## `ListDir2` versus `ListDir` & `ListFiles2` versus `ListFiles`'
 ''
 'Again the syntax of the new functions follows closely `⎕NINFO`. Both offer a significantly better'
 'performance in case of a recursive call.'
 ''
 '## Regarding parameters for `Dir[2]`, `ListFiles[2]` and `ListDirs[2]` '
 ''
 '### Specifying parameters '
 ''
 '`Dir`, `ListFiles` and `ListDirs` allow the specification of parameters as key values pair.'
 ''
 '`Dir2`, `ListFiles2` and `ListDirs2` also allow the specification of parameters as key values pair,'
 'but alternatively they also allow you to pass a parameter space, for example:'
 ''
 '```'
 '      parms←⎕NS'''''
 '      parms.recurse←2'
 '      parms.depth←2'
 '      parms FilesAndDirs.Dir2 path'
 ''
 '```'
 ''
 '### Casing'
 ''
 'Note that although `Dir2`, `ListFiles2` and `ListDirs2` use the `⎕NINFO`-name for recursion ("recurse"),'
 'they still require all potential parameters to be all lowercase, while `⎕NINFO` requires the first'
 'character to be uppercase.             '
 ''
 '## Sorting'
 ''
 'Note that Linux and macOS **do not** guarantee a specific sort order when a list of files and/or'
 'directories is returned. For that reason `FilesAndDirs` uses its own alphabet for sorting, but this is'
 'restricted to ASCII characters. Note that it ensures that "A" comes before "a", but "a" comes before "B". '
 ''
 'However, you can extend the sort alphabet by assigning something different to the variable `SORT_ALPH`,'
 'though **not** via the API. '
 ''
 'When you refer to the variable as `#.FilesAndDirs.SORT_ALPH`, then you see the contents of the variable,'
 'only that it is not a variable: it''s a niladic function returning a reference pointing to the variable.'
 'In order to change the variable you mast refer to the variable rather than the niladic function:'
 ''
 '```'
 '   ⍝ #.FilesAndDirs.SORT_ALPH←...       ⍝ This can''t and won''t work'
 '   #.FilesAndDirs.##.SORT_ALPH←...      ⍝ This will work'
 '``` '
 ''
 'Kai Jaeger'
 ''
 'Homepage: <http://github.com/aplteam/FilesAndDirs>'
)
