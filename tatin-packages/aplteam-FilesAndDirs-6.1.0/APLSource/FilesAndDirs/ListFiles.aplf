 r←{x}ListFiles path;buff;recursiveFlag;part1;part2;recursive;depth
⍝ Lists all files (but nothing else) in `path`.\\
⍝ `path` must of course be a directory.
⍝ Pass "recursive" (not case sensitive) as ⍺ to make the function work recursively.\\
⍝ In addition to "recursive" you may also specify an integer defining the depth. For
⍝ example, if you are interested just in the content of the given directory and its sub-directories
⍝ (but not any sub-sub directories!) then set this to 2.\\
⍝ `*` and `?` are treated as wildcard characters. That means that `FilesAndDirs` cannot deal with files
⍝ that contain a `*` or a `?` as part of any name, be it directory or filename; under Linux and Mac OS
⍝ these are legal characters for filenames and directory names.\\
⍝ Returns a vector of text vectors in case anything was found and `''` otherwise.
 x←{0<⎕NC ⍵:⍎⍵ ⋄ ''⍬}'x'
 x←⊂∘,⍣((⊃' '=1↑0⍴↑x)∧1=≡x)⊣x
 (recursive depth)←2↑x,(≢x)↓0 ⍬
 :If ∧/~'?*'∊1⊃⎕NPARTS path
     path←AddTrailingSep path
 :EndIf
 path←NormalizePath path
 (part1 part2)←APLTreeUtils2.SplitPath path
 'Wildcard characters are allowed only in the last part of a path'⎕SIGNAL 11/⍨∨/'?*'∊part1
 'Right argument is not a directory'⎕SIGNAL 11/⍨0=IsDir part1
 path↓⍨←-CurrentSep=¯1↑path
 recursiveFlag←'recursive'≡⎕C{0<⎕NC ⍵:⍎⍵ ⋄ ''}'recursive'
 path,←(~∨/'?*'∊path)/CurrentSep
 :If 0=≢buff←('recursive'recursiveFlag)('type'(0 1))('depth'depth)Dir path
     r←''
 :Else
     r←(2=1⊃buff)/0⊃buff
     r←NormalizePath r
 :EndIf
