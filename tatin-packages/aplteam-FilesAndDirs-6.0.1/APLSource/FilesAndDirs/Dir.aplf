 r←{parms_}Dir path;buff;list;more;parms;rc;extension;filename;folder;subFolders;pattern;isrecursiveCall
⍝ By default this function returns names. You may request further information by specifying `type`.\\
⍝ Without a trailing slash and any wildcards `path` is expected to be either a filename or the
⍝ name of a directory. `Dir` returns the requested information for just that file or directory.
⍝ `path` might be empty; in this case it defaults to the current directory.\\
⍝ `*` and `?` are treated as wildcard characters. That means that `FilesAndDirs` cannot deal with files
⍝ that contain a `*` or a `?` as part of any name, be it directory or filename; under Linux and Mac OS
⍝ these are legal characters for filenames and directory names.\\
⍝ Only the very last partition of `path` is allowed to carry wildcard characters.\\
⍝ If the last partition of `path` contains wildcards then `Dir` uses them to filter filenames but not
⍝ directories.\\
⍝ The result is a vector of the same length as `type`. `type` defaults to 0 which stands for filenames
⍝ and directory names.\\
⍝ You may specify parameters either as key/value pairs or via a namespace populated with variables.
⍝ Examples:
⍝ ~~~
⍝ ('recursive' 2) FilesAndDirs.Dir ''      ⍝ returns list with directories & files in the current dir.
⍝ ('recursive' 2) FilesAndDirs.Dir '*.md'  ⍝ returns list with files with extension "md".
⍝ ~~~
⍝
⍝ ~~~
⍝ parms←⎕ns''
⍝ parms.recursive←2
⍝ parms.type←3 4 5 1 0
⍝ parms FilesAndDirs.Dir ''
⍝ ~~~
⍝ Note that the names of parameters are case sensitive.\\
⍝ |Parameter  |Default|Meaning|
⍝ |-----------|-------|-------|
⍝ | depth     | ⍬     | Ignored when `recursive` is 0.<<br>>Use this to restrict the number of times `Dir` goes down the directory tree.<<br>>For example, set this to 2 if you are interested just in the given directory and its sub-directories.|
⍝ | follow    | 0     | 1=follow symbolic links, meaning that the properties shown are those of the file the link points to rather than the link. |
⍝ | recursive | 0     | 1=scan `path` recursively; may crash with "ACCESS DENIED"; 2=like 1 but ignores directories that cause "ACCESS DENIED"|
⍝ | type      | 0     | Use this to select the information to be returned by `Dir`.<<br>>0 means names. For more information see help on `⎕NINFO`. |
⍝ Note that `recursiveCall` is used internally in order to detect whether `Dir` has called itself recursively.
 r←⍬
 path←NormalizePath path
 parms←⎕NS''
 parms.follow←1
 parms.recursive←0
 parms.depth←⍬
 parms.type←0
 parms.recursiveCall←0
 :If 0<⎕NC'parms_'
     :If {2::0 ⋄ 1⊣⍵.⎕NL 2}parms_
         {}parms.{{⍎⍺,'←⍵'}/⍵}¨parms_.({⍵(⍎⍵)}¨↓⎕NL 2)
         'Invalid parameter'⎕SIGNAL 11/⍨∨/~(' '~¨⍨↓parms.⎕NL 2)∊'follow' 'recursive' 'type' 'recursiveCall' 'depth'
     :Else
         parms_←,⊂∘,⍣(2=|≡parms_)⊣parms_
         'Invalid parameter'⎕SIGNAL 11/⍨0∊(⊃¨parms_)∊(' '~¨⍨↓parms.⎕NL 2),⊂'recursiveCall'
         parms.{{⍎⍺,'←⍵'}/⍵}¨parms_
     :EndIf
 :EndIf
 isrecursiveCall←parms.recursiveCall
 :If 0=≢path
 :OrIf (,'.')≡,path
     path←PWD,CurrentSep
 :EndIf
 path↓⍨←-(CurrentSep,'*')≡¯2↑path
 :If CurrentSep=¯1↑{⍵↓⍨-'*'=¯1↑⍵}path
     'Directory does not exist'⎕SIGNAL 6/⍨0=⎕NEXISTS path
     :If 'Win'≢APLTreeUtils2.GetOperatingSystem ⍬
     :OrIf ~{(':'=0⊃⍵)∧CurrentSep=1⊃⍵}¯2↑path
         :Trap 19 22
             'Not a directory'⎕SIGNAL 11/⍨1≠1 ⎕NINFO⊣path
         :Else
             :If 1 5 'Access is denied.'≢⎕DMX.OSError
                 ({1↓⊃,/(⎕UCS 13),¨⍵}⎕DMX.DM)⎕SIGNAL ⎕EN
             :Else
                 :Return
             :EndIf
         :EndTrap
     :EndIf
     :Trap 10 19 22
         r←(0 1,parms.type~0 1)⎕NINFO⍠('Follow'parms.follow)('Wildcard' 1)⊣path,'*'
     :Else
         r←⍬  ⍝ Apparently we do not have the rights to read the directory, therefore we ignore it
         :Return
     :EndTrap
     :If 0≠≢0⊃r
         (0⊃r)←NormalizePath 0⊃r
     :EndIf
     :If 0<parms.recursive
         parms.depth-←1
     :AndIf 0≠≢r
     :AndIf 1∊1⊃r
     :AndIf (0=≢parms.depth)∨1↑0<parms.depth
         parms.recursiveCall←1
         buff←parms∘Dir¨((1=1⊃r)/0⊃r),¨CurrentSep
         :If 0≠≢buff←(0<≢¨buff)/buff
             r←r,¨⊃,¨/buff
         :EndIf
         :If 0=isrecursiveCall
             r←(⊂⍋↑0⊃r)∘⌷¨r
         :EndIf
     :EndIf
     :If 0=isrecursiveCall
         r←r[,(0 1,parms.type~0 1)⍳parms.type]
     :EndIf
 :Else
     :If ∨/'*?'∊path
         (folder filename extension)←⎕NPARTS path
         ('Wildcard characters are allowed only after the last "',CurrentSep,'"')⎕SIGNAL 11/⍨∨/'*?'∊folder
         :If 0≠≢buff←⊃⎕NPARTS ¯1↓⊃⎕NPARTS folder
         :AndIf 0=⎕NEXISTS buff
             'path does not exist'⎕SIGNAL 6
         :EndIf
         pattern←(folder,((~(¯1↑folder)∊'/\')∧0≠≢folder)/'/'),(filename{0=≢⍺,⍵:'' ⋄ ⍺,⍵}extension)
         :Trap (0<parms.recursive)/19 22
             buff←(0 1,parms.type~0 1)⎕NINFO⍠('Follow'parms.follow)('Wildcard' 1)⊣pattern
         :Else
             buff←⍬ ⍬
         :EndTrap
         :If 0<parms.recursive
             buff←((1⊃buff)∊2 4)∘/¨buff   ⍝ Just ordinary files and links
         :EndIf
         (0⊃buff)←NormalizePath 0⊃buff
         r←buff[,(0 1,parms.type~0 1)⍳parms.type]
         isrecursiveCall←parms.recursiveCall
         parms.recursiveCall←1
         :If 0<parms.recursive
             parms.depth-←1
         :EndIf
         :If 0<parms.recursive
         :AndIf IsDir folder
         :AndIf (0=≢parms.depth)∨1↑0<parms.depth
         :AndIf 0≠≢subFolders←ListDirs folder
             buff←parms Dir¨subFolders,¨⊂'/',filename,extension
             :If 0=+/'*?'∊path
                 buff←(⊂∘⊂¨subFolders),¨¨buff
             :EndIf
             buff←(0<≢¨buff)/buff
             :If 0≠≢buff←⊃{⍺,¨⍵}/buff
             :AndIf 0≠≢buff←(0<≢¨buff)/buff
                 r←r,¨buff
             :EndIf
         :EndIf
         :If 0=isrecursiveCall
         :AndIf 0=≢(filename,extension)~'*'
             buff←(0 1,parms.type~0 1)⎕NINFO⍠('Follow'parms.follow)⊣folder
             (0⊃buff)←NormalizePath 0⊃buff
             r←(⊂¨buff),¨r
         :EndIf
     :Else
         'path does not exist'⎕SIGNAL 6/⍨0=⎕NEXISTS path
         r←(0 1,parms.type~0 1)⎕NINFO⍠('Follow'parms.follow)⊣path
         (0⊃r)←NormalizePath 0⊃r
         r←,⊂r[,(0 1,parms.type~0 1)⍳parms.type]
     :EndIf
 :EndIf
