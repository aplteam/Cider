(
 '## Overview'
 ''
 'This package comes with functions and operators that allow you to interrogate the user, and make her...'
 ''
 '* answer simple questions like "Are you sure?" or "Do you really want to delete this file?" (`YesOrNo`)'
 '* select an item (or multiple items) from a list of items, or quit (`Select`)'
 '* stop and read a message before she can continue (`Pause`)'
 '* enter a character vector in response to something like "Enter your name:" (`AskForText`)'
 '* enter a number in response to something like "How many copies? " (`AskForNumber`)'
 '                                                                 '
 'This is useful for interacting with the user in the session, something that user commands do quite often.'
 ''
 'Note that although `AskForNumber` and `AskForText` are operators, when this document refers to '
 '"the `CommTools` functions", these two operators are included. '
 ''
 '## Additional features'
 ''
 '### Interrupting the functions'
 ''
 'When a user is prompted for input, due to a long-standing bug in Dyalog you cannot interrupt with a weak '
 'or a strong interrupt. Answering the question or selecting an item and then trying to issue an interrupt '
 'does not work well on modern machines because they are just too fast.'
 ''
 'That''s why all functions allow you to enter `∘∘∘`, which makes the functions run on a stop vector that '
 'is dynamically set for just this purpose.                                                                 '
 ''
 '### Automated feedback'
 ''
 '#### Why automate?'
 ''
 'Imagine you want to implement a test suite for a set of user commands that use `CommTools` for communcation '
 'with the user. With `CommTools` you can automate this, so that your tests don''t require a human in front of'
 'the monitor.'
 ''
 '#### How to automate'
 ''
 'This can be achieved by assigning data to a global variable `∆Automation` which usually doesn''t exist and is '
 'not required for the `CommTools` functions. There is a helper `AddAutomation` available that makes this simple.  '
 ''
 'The process is easy to explain in an example. Let''s assume you want to ask a user whether a file should really'
 'be deleted.'
 ''
 '```'
 '      AddAutomation ''YesOrNo'' ''Sure?'' ''y'''
 ('1'⋄)
 '      ListAutomation 0'
 ' Type     ID     Returns  Counter '
 ' ----     --     -------  ------- '
 ' YesOrNo  Sure?  y              0 '
 '      YesOrNo ''Sure?'''
 ('1'⋄)
 '      YesOrNo ''Really sure?''   ⍝ Not on ∆Automation'
 ''
 'Really sure? (y/n) y'
 ('1'⋄)
 '```'
 ''
 '#### Aliase'
 ''
 'In very simple cases, using the question/mmessage/caption as identifier might suffice, but generally your are'
 'advised to use an alias instead.'
 ''
 'If the question/mmessage/caption is dynamically created you even MUST use an alias, because you cannot know'
 'upfront what the question/mmessage/caption eventually will be.'
 ''
 'An example is the question "Are you sure that you want to delete the file /path/2/file/log-2014-11-11?"'
 ''
 'Let''s replace the entry with an alias:'
 '   '
 '```'
 '      AddAutomation ''YesOrNo'' ''DeleteLogFile@'' ''y'''
 ('1'⋄)
 '      ListAutomation 0'
 ' Type     ID     Returns  Counter '
 ' ----     --     -------  ------- '
 ' YesOrNo  DeleteLogFile@  y              0 '
 '      YesOrNo ''DeleteLogFile@Sure?'''
 ('1'⋄)
 '```'
 ''
 'The `@`-character defines it as an alias. This will work no matter what the actual filename is. Note that an'
 'alias **must not** contain spaces.'
 ''
 'Note also that you can add a kind of comment:'
 ''
 '```'
 '      AddAutomation ''YesOrNo'' ''DeleteLogFile@My Comment'' ''y'''
 '```'
 ''
 'This can be used to explain what an alias is good for.'
 '              '
 '#### Logging of automated responses '
 ''
 'Note that whenever the automation is triggered, the counter in the last (forth) column of `∆Automation` is '
 'increased. This can be used to check whether an intended automation actually took place. '
 ''
 '#### Cleaning up'
 ''
 'Of course there is nothing wrong with deleting the global variable `∆Automation` yourself. However, you can '
 'also just call the function `CommTools.Cleanup`, which will do the job for you.'
 ''
 'This has a small advantage: if `CommTools` is extended in the future, `Cleanup` might do more than that, so '
 'calling it is safer than trying to do the job yourself. '
 ''
 '## The main functions'
 ''
 'The reference section does not discuss automation except when something out of the ordinary needs to be '
 'mentioned (`Pause`, `Select`).'
 ''
 '### `YesOrNo`'
 ''
 'Imagine asking this question:'
 '                       '
 '```'
 'CommTools.YesOrNo ''Are you sure you want to delete this file?'''
 '```'
 ''
 'Note that leading spaces in the question are removed.'
 '  '
 '#### Multiple-line questions                    '
 ''
 '`YesNorNo` accepts nested vectors as questions as well as a character vector with `⎕UCS 10` in it. (Note that '
 'a nested vector is internally converted to a simple character vector with `⎕UCS 10` (Line Feed) in it).'
 ''
 'If the question contains `⎕UCS 13` (Carriage Return), those will be converted into `⎕UCS 10`.'
 ''
 '### `Select` '
 ''
 'This function allows you to present a list of up to 999 choices to the user. She might then select one (the '
 'default) or multiple of the given choices or quit without selecting anything. '
 ''
 'Note that leading spaces in choices are removed.'
 '  '
 'Example:'
 ''
 '```'
 '   l←⊂''First'''
 '   l,←⊂''Second'''
 '   l,←⊂''Third'''
 '   caption←''Please select hot item:'''
 '   caption CommTools.Select l  '
 '``` '
 ''
 'If you want the user allow to select multiple items, pass a 1 as second positional parameter via the left argument:'
 ''
 '```   '
 '   caption 1 CommTools.Select l  '
 '``` '
 ''
 'If you want to force the user to make a selection (in other words: disallow "Quit"),  pass a 1 as third positional '
 'parameter via the left argument: '
 ''
 '```   '
 '   caption 1 1 CommTools.Select l  '
 '```                   '
 ''
 '#### Specifying a selection for automation'
 ''
 'The general principles of automation have been discussed earlier, but in one respect `Select` is different:'
 '                       '
 'If you need a specific selection to be returned but you don''t know the item number in advance, because the list is '
 'created dynamically, you can specify the selection itself instead of an integer.'
 ''
 'For example:'
 ''
 '```'
 '   CommTools.AddAutomation ''Select'' ''My caption'' ''Second'''
 '   ⎕←''My caption'' CommTools.Select l'
 '2     '
 '```'
 ''
 'However, in such cases it might be difficult or even impossible to construct a matching line.'
 ''
 'In such a case use the `*` glyph as a wildcard character: it tells `Select` to match either only the beginning of each '
 'line or only the end of a line. That works because the `*` character must be either the first or the last character; '
 'anywhere else it would be ignored.'
 ''
 'Examples:'
 ''
 'I. At the beginning    '
 ''
 '```'
 '   list←''First item'' ''Second item'' ''Third item'''
 '   CommTools.AddAutomation ''Select'' ''My caption'' ''Second*'''
 '   ''My caption'' CommTools.Select list'
 '```'
 ''
 'I. At the end    '
 ''
 '```'
 '   list←''/path2/file_1'' ''/path2/file_2'' ''/path2/file_3'''
 '   CommTools.AddAutomation ''Select'' ''My caption'' ''*_3'''
 '   ''My caption'' CommTools.Select list'
 '```'
 ''
 '### `Pause` '
 ''
 'The purpose of this function is to print a message to `⎕SE`, possibly with line feed characters (`⎕UCS 10`) in them, '
 'and tell the user to press <enter> to continue.'
 ''
 'Like the other functions, you can interrupt `Pause` by typing `∘∘∘` and then press `<enter>`.'
 ''
 '#### `Pause` and automation'
 ''
 'The general principles of automation have been discussed earlier, but in one respect `Pause` is different:'
 ''
 'If you don''t want your program/user command to pause at all, use the wildcard symbol (`*`) as ID:'
 ''
 '```'
 '      CommTools.AddAutomation ''Pause'' ''*'' '''''
 '```                                         '
 ''
 'This is interpreted as "don''t stop when `Pause` is called anywhere".'
 ''
 '### `AskForNumber`'
 ''
 'Imagine you ask this question:'
 '                       '
 '```'
 '({1}CommTools.AskForNumber) ''Number of copies to print'''
 '```'
 ''
 'Note that the operator `AskForNumber` requires a check function to be passed as left operand. In the example '
 'the check function simply returns a 1. Instead you could perform a real check like this:'
 ''
 '```'
 'CheckFn←{'
 '   ⍵∊1 2 3 4 5:1 '
 '   ⎕←''Please enter a number between 1 and 5'' '
 '   0'
 ('}'⋄)
 '(CheckFn CommTools.AskForNumber) ''Number of copies to print:'''
 '```     '
 ''
 'If the user does not enter a number but just presses <enter>, an empty vector is returned. You can force the user '
 'to enter a number by passing a 1 as left argument (`enforce`).'
 ''
 'Note that leading spaces in the question are removed, ": " is appended'
 ''
 '### `AskForText`'
 ''
 'Imagine you are asking this question:'
 '                       '
 '```'
 '({1}CommTools.AskForText) ''Enter a month (three characters)'''
 '```'
 ''
 'Note that the operator `AskForText` requires a check function to be passed as left operand. In the example '
 'the check function simply returns a 1. Instead you could perform a real check like this:'
 ''
 '```'
 'CheckFn←{'
 '   (⊂⍵)∊↓12 3⍴''janfebmaraprmaijunjulaugsepoctnovdec'':1 '
 '   ⎕←''Please enter just three lowercase characters identifying a month'' '
 '   0'
 ('}'⋄)
 '(CheckFn CommTools.AskForText) ''Enter a month (just three characters)'''
 '```     '
 ''
 'If the user does not enter anything but just hits <enter> an empty vector will be returned. '
 'You can force the user to enter a number by passing a 1 as left argument (`enforce`).'
 ''
 'Instead of a Boolean you can also specify a character vector as `⍺`. In that case, when the user just presses `<enter>`'
 'without entering anything, the default (`⍺`) is returned.'
 ''
 'Note that leading spaces in the question are removed, ": " is appended'
 ''
 '### Helpers'
 ''
 'There are two helpers available that assist the user in dealing with the `∆Automation` variable.'
 ''
 '#### `AddAutomation`'
 ''
 'This allows you to add a line to the variable `∆Automation`. If it does not exist it''s created.'
 ''
 'It requires 3 values:'
 ''
 '1. The type: must be one of `AskForNumber`, `AksForText`, `Pause`, `Select` or `YesOrNo`'
 '2. The ID: either a message/question/caption or an alias'
 '3. The data to be returned, if any '
 ''
 '#### `ListAutomation`'
 ''
 'This function requires a right argument: when an ampty vector is provided, then all entries in `∆Automation` are'
 'returned. If it is not empty it is treated as a list of types, for example:'
 ''
 '```'
 '      ListAutomation ''Select'''
 '      ListAutomation ''Select'' ''YesOrNo'' '
 '      '
 'By default column headers are added to matrix, and a message (character vector)is returned in case `∆Automation` '
 'does not exist or is empty or has no data for the specified types.'
 ''
 'This can be changed by specifying a 1 as optional left argument: then a matrix with four columns is returned '
 'without column titles. and the matrix will be empty if there is no data.'
 ''
 '#### `FindAutomationIndex`'
 ''
 'This function takes `type` and `id` as right argument and returns one of:'
 ''
 '* `⍬` in case `∆Automation` does not exist or no matching row was found '
 '* The index of the row with a match'
 ''
 'Therefore it can also be used to determin whether a certain alias is defined in `∆Automation`, see this example:'
 ''
 '```'
 '      ⍬≢FindAutomationIndex ''YesOrNo'' ''Sure@'' ''y''   ⍝ Does this exist?'
 ('1'⋄)
 '```'
 '                                                                      '
 ''
 ''
)
