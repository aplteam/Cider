 (success rc msg)←ExecUnderTrap expr;qdmx;valence;hasResult;cmd
⍝ Executes `expr` under a :Trap 0 and returns (1 0 '') in case of success and (0 ⎕en <errorMessage>) otherwise.
⍝ If `expr` is a function that returns a result, that result will be ignored.
⍝ If `expr` is a function that requires a right argument, for the time bing ⎕NULL is passed.
 :Trap 0
     hasResult←(10 ⎕ATX expr)∊1 ¯1
     valence←11 ⎕ATX expr
     :If valence=0              ⍝ Niladic
         cmd←(hasResult/'{}'),expr
         ⍎cmd
     :ElseIf valence∊1 ¯2       ⍝ Monadic or ambivalent
         cmd←(hasResult/'{}'),expr,' ⎕NULL'
         ⍎cmd
     :Else                      ⍝ That leaves a dyadic call
         ⎕←'>>> "lx" funcion ',expr,' is dyadic and therefore cannot called!'
     :EndIf
     success←1
     rc←0
     msg←''
 :Else
     qdmx←⎕DMX
     success←0
     rc←qdmx.EN
     msg←qdmx.DM
 :EndTrap
