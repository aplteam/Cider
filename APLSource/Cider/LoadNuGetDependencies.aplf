 list←x LoadNuGetDependencies(folder ns);p;verbose;batch;cfg;nuGetFolder;list;name;list2;targetNamespace;buff;dlls;assemblies;namespace;_dotnetReflection;exportedNamespaces
⍝ Load all dotnet namespace exported by NuGet dependencies from
⍝ folder into `ns` (namspace).
⍝ Returns a list with the names of all loaded NuGet packages.
 (verbose batch)←2↑x,0
 list←''
 ('"',folder,'" is not a Cider project directory')Assert F.IsDir folder
 cfg←ReadProjectConfigFile folder
 nuGetFolder←folder,'/','dependencies'GetNuGetDependencies cfg
 targetNamespace←''
 :If '='∊buff←2⊃⎕NPARTS nuGetFolder
     targetNamespace←{⍵↓⍨⍵⍳'='}buff
     nuGetFolder←(-1+≢targetNamespace)↓nuGetFolder
 :EndIf
 :If F.IsDir nuGetFolder
 :AndIf 0<≢list2←F.ListFiles2 nuGetFolder,'/*.csproj'
     :If 1≠1⊃2250⌶0
         Frame'Cannot load NuGet packages because .NET is not available'
         list←''
         :Return
     :EndIf
     p←verbose batch∘{⍺ PrintToSession ⍵}
     list←1⌷⍉↑NuGet.Packages nuGetFolder
     :If 2=⎕NC'ns'
         ns←⍎ns
     :EndIf
     '_dotnet'ns.⎕NS''
     :If 0<≢targetNamespace
         targetNamespace ns.⎕NS''
     :EndIf
     nuGetFolder←F.(EnforceSlash ExpandPath)nuGetFolder
     ns._dotnet.⎕USING←'(includePrimary : 0)'NuGet.Using nuGetFolder
     _dotnetReflection←⎕NS''
     _dotnetReflection.⎕USING←'System.Reflection,System.Runtime.dll'
     ⍝ Determine path to dlls of principal dependencies
     dlls←{¯1↑','(≠⊆⊢)⍵}¨ns._dotnet.⎕USING
     ⍝ If any of these dlls doesn't exists, they all should be recreated
     :If ~∨/⎕NEXISTS⊃¨dlls
         NuGet.Publish nuGetFolder
     :EndIf
     assemblies←_dotnetReflection.Assembly.LoadFile¨dlls
     ⍝ Add references to namespaces directly exposed by the principal
     ⍝ dependencies to the _dotnet namespace
     exportedNamespaces←∪1⊃¨'.'(≠⊆⊢)¨⊃,/assemblies.GetExportedTypes.FullName
     :For namespace :In exportedNamespaces
         :If 0=≢targetNamespace
             ns.{⍎⍵,'←_dotnet.',⍵}namespace
         :Else
             targetNamespace ns.{⍎⍺,'.',⍵,'←_dotnet.',⍵}namespace
         :EndIf
     :EndFor
 :EndIf
