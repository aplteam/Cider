 r←AddTatinDependencies Args;path;packages;projectFolder;cfg;development;ref;flag;q;list;sourceFolder;targetNS;targetNamespace;ref2;targetNS2;list2;sourceFolder2;noOf
 r←''
 packages←Args._1
 projectFolder←Args._2
 development←0 Args.Switch'development'
 targetNamespace←''Args.Switch'target'
 :If IsAlias projectFolder
     projectFolder←P.##.GetFolderFromAlias2 projectFolder
 :Else
     projectFolder←'GetProjectPathForAddingTatinPkgs@Which project would you like to add Tatin packages to?'GetProjectPath projectFolder
 :EndIf
 :If 0=≢projectFolder
     r←'Cancelled by user' ⋄ →0
 :EndIf
 cfg←P.ReadProjectConfigFile projectFolder
 :If development
     ref←cfg.CIDER.dependencies_dev
 :Else
     ref←cfg.CIDER.dependencies
 :EndIf
 :If 0<≢targetNamespace
     'There is already a target namespace defined; edit the project config file to change that'Assert~'='∊ref.tatin
     ref.tatin,←'=',targetNamespace
     cfg P.WriteProjectConfigFile projectFolder
 :EndIf
 flag←0
 :Repeat
     :If 0=ref.⎕NC'tatin'
     :OrIf 0=≢ref.tatin
         q←(2⊃⎕NPARTS projectFolder),': no Tatin dependency folder defined for "dependencies',(development/'_dev'),'" - edit project config file?'
         q←'EditProjectConfig@',q
         :If 1 P.##.C.YesOrNo q
             1 P.ProjectConfig projectFolder
             cfg←P.ReadProjectConfigFile projectFolder
             ref←cfg.CIDER.dependencies
         :Else
             r←'Cancelled by user' ⋄ →0
         :EndIf
     :Else
         q←'AddTatinDeps@',(2⊃⎕NPARTS projectFolder),': add dependencies to the folder ',({⍵↑⍨¯1+⍵⍳'='}ref.tatin),'/'
         :If 1 P.##.C.YesOrNo q
             flag←1
         :Else
             r←'Cancelled by user' ⋄ →0
         :EndIf
     :EndIf
 :Until flag
 list←P.AddTatinDependencies packages projectFolder development
 r←⍪(⊂(⍕≢list),' Tatin ',(development/'development-'),'dependenc',((1+1<≢list)⊃'y' 'ies'),' added:'),' ',¨list
 :If 0<≢list
 :AndIf 1 P.##.C.YesOrNo'LoadTatinDependenciesAfterAdding@Would you like to (re-)load all Tatin dependencies?'
     targetNS←(⊃{⍺,'.',⍵}/cfg.CIDER.(parent projectSpace)){0=≢⍵:⍺ ⋄ ⍺,'.',⍵}{⍵↓⍨⍵⍳'='}ref.tatin
     :If 9=⎕NC targetNS
         {}(⍎targetNS).{0=≢l←↓⎕NL 9:0 ⋄ 0=+/b←∨/¨'._tatin.'∘⍷¨⍕¨⍎¨l:0 ⋄ +/⎕EX¨b/l}⍬   ⍝ Delete all previous references
     :Else
         targetNS ⎕NS''
     :EndIf
     sourceFolder←projectFolder,'/',P.##.RemoveTargetDefinition ref.tatin
     list←⎕SE.Tatin.LoadDependencies sourceFolder targetNS
          ⍝ If ref points to "dev" then ref2 doesn't and vice versa
     ref2←(1+~development)⊃cfg.CIDER.(dependencies dependencies_dev)
     targetNS2←(⊃{⍺,'.',⍵}/cfg.CIDER.(parent projectSpace)){0=≢⍵:⍺ ⋄ ⍺,'.',⍵}{⍵↓⍨⍵⍳'='}ref2.tatin
     :If targetNS≡targetNS2    ⍝  Only when "normal" dependencies and development dependencies go into the same namespace...
         sourceFolder2←projectFolder,'/',P.##.RemoveTargetDefinition ref2.tatin
         :If P.##.F.IsDir sourceFolder2
         :AndIf 0<≢P.##.F.ListDirs2 sourceFolder2
         :AndIf P.##.F.IsFile sourceFolder2,⎕SE._Tatin.Client.Reg.BuildListFilename
             list2←⎕SE.Tatin.LoadDependencies sourceFolder2 targetNS2          ⍝... do we need to (re-)load both
             noOf←+/≢¨list list2
         :Else
             noOf←≢list
         :EndIf
     :Else
         noOf←≢list
     :EndIf
     r←r⍪⊂(⍕noOf),' dependenc',((1+1<noOf)⊃'y was' 'ies were'),' loaded'
 :EndIf
