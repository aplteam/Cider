 (successFlag ∆LOG)←OpenProject y;parms;configFilename;config;bool;res;linkOptions;source;p;dmx;projectSpace_;parms;fn;qdmx;pkgStatus;buff;nugetFolder;msg;flag;ref2TatinVars;∆Problems;loadDependencies
⍝ Open a Cider project.\\
⍝ `y` must be one of:
⍝  * a namespace holding all required parameters. Such a namespace can be created by calling `CreateOpenParms`
⍝  * A character vector holding the full path to a project\\
⍝ The function returns either FAILURE or SUCCESS. This refers to the principal operation: opening the project.
⍝ If something like loading dependencies goes wrong, then messages are printed to the session in case batch←0.\\
⍝ In case `batch` is 1 things are different, however: in that case an error is thrown for all essential parts of
⍝ the operation. That includes loading any dependencies but excludes non-essential stuff like a Git status report.\\
⍝ The final message is "Project successfully [opened|imported and established in ... [with problems]". The
⍝ optional "with problems" part as added only when something like loading dependencies, or executing the package's
⍝ `lx` expression successfuly went wrong.
 successFlag←FAILURE
 ∆LOG←''                        ⍝ This is used to collect all messages
 ∆Problems←0                    ⍝ Use as a counter of any problems; only relevant when batch←0
 :If 80=⎕DR y
     parms←CreateOpenParms''
     parms.folder←y
 :Else
     parms←CreateOpenParms y
 :EndIf
 '"folder" must be specified'Assert 0<parms.⎕NC'folder'
 '"folder" must be specified'Assert 0<≢parms.folder
 '"projectSpace" must be specified'Assert 0<parms.⎕NC'projectSpace'
 '"watch" must be one of: ns|dir|both'Assert(⊂⎕C parms.watch)∊'ns' 'dir' 'both' 'none' 0
 p←{⍺←parms.(verbose batch) ⋄ ⍺ PrintToSession ⍵}
 parms←(p GetFolderFromAlias)parms
 ('Folder does not exist: ',parms.folder)Assert F.Exists parms.folder
 p((1+parms.importFlag)⊃'Loading' 'Importing'),' project from ',parms.folder
 parms.projectSpace←⍕parms.projectSpace
 :If 0<≢parms.parent
     parms.parent←,parms.parent
     'First level of parent must be either "#" or "⎕SE"'Assert(⊆1 ⎕C{⍵↑⍨¯1+⍵⍳'.'}parms.parent)∊,¨'#' '⎕SE'
     ('Parent namespace "',parms.parent,'" does not exist')Assert(9=⎕NC parms.parent)∨(⊂,1 ⎕C parms.parent)∊,¨'#' '⎕SE'
 :EndIf
 :If 0<≢parms.projectSpace
     ('"projectSpace" must not carry a "." (see "parent"')Assert 0='.'+.=parms.projectSpace
     'Project space is not a valid APL name'Assert{0::0 ⋄ 0=(⎕NS'').⎕NC ⍵}⍕parms.projectSpace
 :EndIf
 parms.alias←⎕C parms.alias
 :If parms.alias≡'.'
     parms.alias←⎕C 2⊃{1 ⎕NPARTS(-(¯1↑⍵)∊'/\')↓⍵}parms.folder
 :EndIf
 AddAlias parms.folder parms.alias
 configFilename←parms.folder,'/cider.config'
 ('No file "cider.config" found in ',parms.folder)Assert F.Exists configFilename
 config←ReadProjectConfigFile configFilename
 config(CopyParms)←parms
 :If 0=≢parms.projectSpace                                                      ⍝ Was it specified as argument?
 :AndIf 0=≢parms.projectSpace←config.CIDER.projectSpace                         ⍝ Nope, so the config file rules...
     parms.projectSpace←'#'                                                     ⍝ ... but only is it is not empty
 :EndIf
 :If 0=≢parms.parent                                                            ⍝ Was it specified as argument?
     parms.parent←config.CIDER.parent                                           ⍝ Nope, so the config file rules
 :EndIf
 :If 0=≢parms.projectSpace
     projectSpace_←⍎parms.parent                                                ⍝ Is either # or ⎕SE
 :Else
     :If ~(,⊂1 ⎕C parms.parent)∊,¨'#' '⎕SE'
         ('Namespace <',parms.parent,'> does not exist')Assert 9=⎕NC parms.parent
     :EndIf
     projectSpace_←⍎parms.projectSpace(⍎parms.parent).⎕NS''                     ⍝ Create project space from "parent" to avoid problems
 :EndIf
 config←projectSpace_.⎕NS config
 'Already opened?!'Assert~CheckForAlreadyOpened projectSpace_
 config←parms PolishProperties config
 config←HandleLinkParameters config configFilename
 config←CheckParameters config
 configFilename HandleSysVars config
 source←parms.folder,(0<≢config.CIDER.source)/'/',config.CIDER.source           ⍝ For linking we are only interested in the code folder
 ('Source folder does not exist: ',parms.folder)Assert F.Exists parms.folder
 (linkOptions parms)←ProcessLinkOptions parms config
 p'Bringing in the source code...'
 projectSpace_←CheckTargetNamespaceAndLinkFolder projectSpace_ parms config.CIDER.source
 :If parms.importFlag
     res←linkOptions ⎕SE.Link.Import projectSpace_ source                       ⍝ Get the code into the WS
     dmx←⎕DMX
     ('LINK failed to import the code (,',dmx.EM,')')Assert~∨/'Error:'⍷res
     p'Code imported'
 :Else
     res←linkOptions ⎕SE.Link.Create projectSpace_ source                       ⍝ Get the code into the WS
     dmx←⎕DMX
     ('LINK failed to load the code (',dmx.EM,')')Assert~∨/'Error:'⍷res
     ('LINK failed to load the code from <(',source,'>')Assert~∨/'Unknown Debug options in'⍷res
     :If ∨/'ERRORS ENCOUNTERED:'⍷res
         res Assert 0
     :EndIf
 :EndIf
 ⍝ --- Change of strategy: "watch is now handled like any other parameter: ---
 ⍝ Only reported when it is not set to the default.
 ⍝ (1 parms.batch)p 'watch'ReportLinkSettings linkOptions    ⍝ Exclude "watch"
 ⍝ 1 p parms.batch ReportWatch res                           ⍝ Always
 ⍝ ---------------------------------------------------------------------------
 (1 parms.batch)p ReportLinkSettings linkOptions
 :If 0=parms.noPkgLoad
     loadDependencies←1
     :If ¯1=pkgStatus←parms CheckForTatinPackages config
         loadDependencies←0
     :EndIf
     :If 0<pkgStatus
         :If 0=parms.importFlag
             :Trap 0
                 CheckPackagesStatus config parms pkgStatus
             :Else
                 ⎕SE._Tatin.Client.CloseConnections 1                           ⍝ Just in case...
                 qdmx←⎕DMX
                 buff←''
                 buff,←⊂'ERROR: Checking Tatin package status in ',parms.folder
                 buff,←⊂' failed: ',{(1⊃⍵),' in ',{⍵↑⍨⍵⍳']'}(2⊃⍵)}qdmx.DM
                 ∆Problems+←1
                 loadDependencies←0
                 (1↓⊃,/(⎕UCS 13),¨buff)Assert parms.batch
                 (1 parms.batch)p buff
             :EndTrap
         :EndIf
         :Trap 0
             :If loadDependencies
             :AndIf 0=parms.(verbose batch)LoadTatinDependencies config parms.folder(⍕projectSpace_)
                 buff←'Package folder ',parms.folder,' needs attention!'
                 ∆Problems+←1
                 buff Assert~parms.batch
                 1 p buff
             :EndIf
         :Else
             ⎕SE._Tatin.Client.CloseConnections 1                               ⍝ Just in case...
             qdmx←⎕DMX
             buff←''
             buff,←⊂'ERROR: loading Tatin packages from ',parms.folder
             buff,←⊂' failed: ',{(1⊃⍵),' in ',{⍵↑⍨⍵⍳']'}(2⊃⍵)}qdmx.DM
             buff←1↓⊃,/(⎕UCS 13),¨buff
             ∆Problems+←1
             buff Assert~parms.batch
             1 p buff
         :EndTrap
     :EndIf
     :If 0<config.⎕NC'CIDER.dependencies.nuget'
     :AndIf 0<≢config.CIDER.dependencies.nuget
         :If {(0<1⊃⍵)∧2⊃⍵}2250⌶0
             :Trap 11
                 {}parms.(verbose batch)LoadNuGetDependencies parms.folder projectSpace_
             :Else
                 ⎕SE._Tatin.Client.CloseConnections 1                           ⍝ Just in case...
                 qdmx←⎕DMX
                 buff←''
                 buff,←⊂'ERROR: loading NuGet packages from ',parms.folder
                 buff,←⊂' failed: ',{(1⊃⍵),' in ',{⍵↑⍨⍵⍳']'}(2⊃⍵)}qdmx.DM
                 ∆Problems+←1
                 buff Assert~parms.batch
                 1 p buff
             :EndTrap
         :Else
             'Cannot load NuGet packages: .NET is not available'Assert~parms.batch
             1 p'Cannot load NuGet packages: .NET is not available'
         :EndIf
     :EndIf
 :EndIf
 InjectConfigDataIntoProject config projectSpace_ parms.folder
 ref2TatinVars←InjectTatinVars projectSpace_ parms.folder
 parms HandleLX ref2TatinVars projectSpace_
 flag←(0=parms.batch)∧(0=parms.importFlag)
 {}ChangeCurrentDir⍣flag⊢parms.folder
 {}parms ExecProjectInitFunction⍣(0=parms.suppressInit)⊢config projectSpace_
 {}ExecUserFunction⍣((0=parms.importFlag)∧0=parms.ignoreUserExec)⊣config
 {}parms CheckOnToDo⍣flag⊣projectSpace_
 successFlag←SUCCESS
 {}CheckForDropboxConflicts⍣flag⊢parms.folder
 {}CheckForGit⍣flag⊢parms.folder config parms
 msg←'Project successfully ',(1+parms.importFlag)⊃'opened' 'imported'
 :If 0<∆Problems
     msg,←' (though with ',(⍕∆Problems),' problem',((1<∆Problems)/'s'),')'
 :EndIf
 msg,←' and established in: ',parms.parent,{(,'#')≡,⍵:'' ⋄ '.',⍵}parms.projectSpace
 p msg
⍝Done
