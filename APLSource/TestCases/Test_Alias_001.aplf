 R←Test_Alias_001(stopFlag batchFlag);⎕TRAP;parms;list;rc;parms2;success;log;res
⍝ Exercise the ListOpenProjects function with -verbose (involves aliases)
 ⎕TRAP←(999 'C' '∘∘∘ ⍝ Deliberate error')(0 'N')
 R←T._Failed

 'TEMP'#.⎕NS''
 'TEMP2'#.⎕NS''

 parms←⎕NS''
 parms.folder←∆ALIAS_TEMP_FOLDER,'/Project1'
 parms.alias←'test-project-1'
 parms.watch←'ns'
 parms.ignoreUserExec←1
 parms.batch←1
 ##.Cider.C.AddAutomation'YesOrNo' 'ChangeCurrentDir@' 'n'
 (success log)←##.Cider.OpenProject parms
 →T.PassesIf success
 →T.GoToTidyUp∨/'ERROR'⍷log
 →T.PassesIf 1=≢#.TEMP.⎕NL 3
 →T.PassesIf 0=≢(' '~¨⍨↓#.TEMP.⎕NL(⍳16)~3)~⊂'CiderConfig'

 parms2←⎕NS''
 parms2.folder←∆ALIAS_TEMP_FOLDER,'/Project2'
 parms2.alias←'test-project-2'
 parms2.watch←'ns'
 parms2.ignoreUserExec←1
 parms2.batch←1
 (success log)←##.Cider.OpenProject parms2
 →T.GoToTidyUp~success
 →T.GoToTidyUp∨/'ERROR'⍷log
 →T.GoToTidyUp 1≠≢#.TEMP2.⎕NL 3
 →T.GoToTidyUp 0≠≢(' '~¨⍨↓#.TEMP2.⎕NL(⍳16)~3)~⊂'CiderConfig'

 list←##.Cider.ListOpenProjects 1
 →T.GoToTidyUp 4≠2⊃⍴list   ⍝ Namespace, folder, object count, alias
 →T.GoToTidyUp 2>≢list
 →T.GoToTidyUp 2≠+/((-1+≢'Project1')↑¨list[;2])∊'/Project1' '/Project2' '\Project1' '\Project2'
 →T.GoToTidyUp~∧/'test-project-1' 'test-project-2'∊list[;4]

 R←T._OK

∆TidyUp:
 ⍝ The aliase are removed by later test cases
 ##.Cider.C.Cleanup
 res←∆LINK'Break' '#.TEMP'
 Assert res ∆StartsWith'Unlinked:'
 res←∆LINK'Break' '#.TEMP2'
 Assert res ∆StartsWith'Unlinked:'
 #.⎕EX¨'TEMP' 'TEMP2'
⍝Done
